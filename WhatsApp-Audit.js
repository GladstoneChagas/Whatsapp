// üì¶ Importa bibliotecas necess√°rias
const { Client, LocalAuth } = require('whatsapp-web.js'); // Cliente WhatsApp Web com autentica√ß√£o local
const qrcode = require('qrcode-terminal'); // Gera√ß√£o de QR code no terminal
const fs = require('fs'); // Manipula√ß√£o de arquivos
const csv = require('csv-parser'); // Leitura de arquivos CSV

// üöÄ Inicializa o cliente WhatsApp com autentica√ß√£o persistente
const client = new Client({
  authStrategy: new LocalAuth() // Mant√©m a sess√£o ativa entre execu√ß√µes
});

// üì≤ Exibe QR code no terminal para login
client.on('qr', qr => {
  console.log('üì± Escaneie este QR code com seu WhatsApp:');
  qrcode.generate(qr, { small: true });
});

// üìÅ Fun√ß√£o para ler n√∫meros de telefone de um arquivo CSV
function lerContatosCSV(caminhoArquivo) {
    return new Promise((resolve, reject) => {
      const contatos = [];
  
      fs.createReadStream(caminhoArquivo)
        .pipe(csv())
        .on('data', (row) => {
          if (row.numero) {
            const numeroFormatado = row.numero.replace(/\D/g, ''); // Remove caracteres n√£o num√©ricos
            console.log(`üì• N√∫mero encontrado: ${row.numero} ‚Üí formatado: ${numeroFormatado}`);
            contatos.push(numeroFormatado);
          }
        })
        .on('end', () => {
          console.log(`üì¶ Lista final de n√∫meros formatados:`, contatos);
          resolve(contatos); // Finaliza leitura e retorna os n√∫meros
        })
        .on('error', reject); // Trata erro de leitura
    });
}

// üîç Fun√ß√£o para buscar um grupo pelo nome
async function buscarIdDoGrupoPorNome(nomeGrupo) {
  const chats = await client.getChats(); // Obt√©m todos os chats
  const grupos = chats.filter(chat => chat.isGroup); // Filtra apenas os grupos

  // Busca grupo por nome (case insensitive)
  const grupo = grupos.find(g => g.name.toLowerCase() === nomeGrupo.toLowerCase());

  if (!grupo) {
    throw new Error(`Grupo "${nomeGrupo}" n√£o encontrado.`);
  }

  const idGrupo = grupo.id._serialized;
  console.log(`‚úÖ Grupo encontrado: ${grupo.name} | ID: ${idGrupo}`);

  return idGrupo;
}

async function validarGrupoPorId(idGrupo) {
  try {
    const numerosEsperados = await lerContatosCSV('contatos.csv');

    // ‚ö†Ô∏è Recarrega todos os chats para for√ßar atualiza√ß√£o da inst√¢ncia
    await client.getChats(); // for√ßa sincroniza√ß√£o interna

    // ‚ö° Reobt√©m o grupo ap√≥s sincroniza√ß√£o
    const grupo = await client.getChatById(idGrupo);

    // ‚ö†Ô∏è Aguarda um tempo m√≠nimo para garantir que a inst√¢ncia seja atualizada
    await new Promise(resolve => setTimeout(resolve, 1000));

    const participantes = grupo.participants.map(p => p.id.user);
    console.log(`üìõ Membros atuais: ${participantes.join(', ')}`);

    const numerosParaRemover = participantes.filter(numero => !numerosEsperados.includes(numero));
    const numerosParaAdicionar = numerosEsperados.filter(numero => !participantes.includes(numero));

    const idsParaRemover = numerosParaRemover.map(numero => `${numero}@c.us`);
    const idsParaAdicionar = numerosParaAdicionar.map(numero => `${numero}@c.us`);

    if (idsParaRemover.length > 0) {
      console.log(`üö´ Removendo: ${idsParaRemover.join(', ')}`);
      await removeParticipants(grupo, idsParaRemover);
    } else {
      console.log('‚úÖ Nenhum membro extra encontrado.');
    }

    if (idsParaAdicionar.length > 0) {
      console.log(`‚ûï Adicionando: ${idsParaAdicionar.join(', ')}`);
      await addParticipantsIfMissing(grupo, numerosParaAdicionar);
    } else {
      console.log('‚úÖ Todos os contatos esperados j√° est√£o no grupo.');
    }

    console.log('üèÅ Valida√ß√£o conclu√≠da.');
    await limpeza();
    process.exit();
  } catch (err) {
    console.error(`‚ö†Ô∏è Erro ao validar grupo: ${err.message}`);
    process.exit(1);
  }
}


async function removeParticipants(grupo, listaDeIdsRemover) {
    console.log(`üîç Tentando remover ${listaDeIdsRemover.length} participantes...`);
  
    for (const id of listaDeIdsRemover) {
      const removenumber = `${id}`;
      console.log(`‚û°Ô∏è Removendo: ${removenumber}`);
      try {
        await grupo.removeParticipants([removenumber]); // tenta um por vez
        console.log(`‚úÖ Removido com sucesso: ${removenumber}`);
      } catch (erro) {
        console.error(`‚ö†Ô∏è Falha ao remover ${removenumber}: ${erro.message}`);
      }
    }
  
    console.log('üèÅ Remo√ß√£o conclu√≠da.');
  }

async function addParticipantsIfMissing(grupo, listaDeIdsAdd) {
    console.log(`üîç Verificando ${listaDeIdsAdd.length} n√∫meros para adicionar...`);
  
    // Extrai os n√∫meros atuais do grupo
    const numerosGrupo = grupo.participants.map(p => p.id.user);
  
    for (const numero of listaDeIdsAdd) {
      const id = `${numero}@c.us`;
  
      if (!numerosGrupo.includes(numero)) {
        try {
          console.log(`‚ûï Adicionando: ${id}`);
          await grupo.addParticipants([id]);
          console.log(`‚úÖ Adicionado com sucesso: ${id}`);
        } catch (erro) {
          console.error(`‚ö†Ô∏è Falha ao adicionar ${id}: ${erro.message}`);
        }
      } else {
        console.log(`‚ÑπÔ∏è J√° est√° no grupo: ${id}`);
      }
    }
  
    console.log('üèÅ Adi√ß√£o conclu√≠da.');
  }

async function limpeza() {
  // üßπ Remo√ß√£o de pastas recursiva (s√≠ncrona)
  const path = require('path');

  const pastasParaRemover = [
    path.join(__dirname, '.wwebjs_auth'),
    path.join(__dirname, '.wwebjs_cache')
  ];

  for (const pasta of pastasParaRemover) {
    try {
      fs.rmSync(pasta, { recursive: true, force: true });
      console.log(`üßπ Pasta removida com sucesso: ${pasta}`);
    } catch (err) {
      console.error(`‚ö†Ô∏è Erro ao remover pasta ${pasta}: ${err.message}`);
    }
  }
}



client.on('ready', async () => {
    console.log('‚úÖ Cliente conectado ao WhatsApp!');
  
    const chats = await client.getChats();
    const grupos = chats.filter(chat => chat.isGroup);
  
    console.log('üìã Grupos dispon√≠veis:');
    grupos.forEach(grupo => {
      console.log(`- Nome: ${grupo.name} | ID: ${grupo.id._serialized}`);
    });
  
    const nomeDoGrupo = 'teste'; // ‚Üê nome do grupo desejado
  
    try {
      const idGrupo = await buscarIdDoGrupoPorNome(nomeDoGrupo); // ‚Üê recebe s√≥ o ID
      console.log(`üîé ID do grupo "${nomeDoGrupo}": ${idGrupo}`);
      //await validarGrupoPorId(idGrupo); // ‚Üê usa o ID direto
    } catch (erro) {
      console.error(`‚ùå Erro ao localizar grupo: ${erro.message}`);
    }
  });
  


// üîß Inicializa o cliente WhatsApp
client.initialize();

// üßπ Remo√ß√£o de pastas recursiva (s√≠ncrona)
const path = require('path');

const pastasParaRemover = [
  path.join(__dirname, '.wwebjs_auth'),
  path.join(__dirname, '.wwebjs_cache')
];

for (const pasta of pastasParaRemover) {
  try {
    fs.rmSync(pasta, { recursive: true, force: true });
    console.log(`üßπ Limpando autentica√ß√£o e cache `);
  } catch (err) {
    console.error(`‚ö†Ô∏è Erro ao fazer de limpeza autentica√ß√£o e cache ${pasta}: ${err.message}`);
  }
}

//module.exports = {
//  client,
//  buscarIdDoGrupoPorNome,
//  validarGrupoPorId
//};

